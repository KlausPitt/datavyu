{
    "contents" : "# Functions to convert an R list to a datavyu csv file\n# Some of these require my mejr R libary\n# An R list object can have sublists\n#   Each sublist is a datavyu column\n#   There must be at least these sublists: ordinal, onset, offset\n#   Each onset, offset must be in milliseconds time, as if datavyu exported it using a ruby script\n# At the moment there doesn't seem to be a way for datavyu to IMPORT .csv\n#   even though you can export to one\n#   To get it back to .opf, use the csv2opf ruby script\n\n\n#' Fake Datavyu data\n#' \n#' This function will create fake data in the R format needed to import into Datavyu\n#'\n#' The function shows how you can have either a list of columns or an actual data frame. Either way will work.\n#' @param n1 Sample size for variable 1\n#' @param n2 Sample size for variable 2\n#' @examples\n#' my_data <- datavyu_dat()\n#' @export\ndatavyu_dat <- function(n1=10, n2=15) {\n  ch_on <- sort(round(runif(n1, 0, 3600000)))\n  pr_on <- sort(round(runif(n2, 0, 3600000)))\n  \n  \n  ch_off <- abs(round(runif(n1, ch_on+1, c(ch_on[2:n1]-1, 3600000))))\n  pr_off <- abs(round(runif(n2, pr_on+1, c(pr_on[2:n2]-1, 3600000))))\n  \n  hand_char <- c(\"left\", \"right\", \"both\", \"\")\n  look_val <- c(\"0\", \"1\", \"\")\n  \n  dat <- list(\n    childhands = list(\n      ordinal=1:n1,\n      onset=ch_on,\n      offset=ch_off,\n      hand=sample(hand_char, n1, replace=TRUE),\n      look=sample(look_val, n1, replace=TRUE)\n    ),\n    parenthands = data.frame(\n      ordinal=1:n2,\n      onset=pr_on,\n      offset=pr_off,\n      hand=sample(hand_char, n2, replace=TRUE),\n      look=sample(look_val, n2, replace=TRUE)\n    )\n  )\n  return(dat)\n}\n\n#' Convert milliseconds to a time string\n#' \n#' This will take a duration of time in milliseconds and convert it to a time string format\n#' \n#' @param timestamp A numeric time duration, such as \\code{1102013} ms\n#' @param unit How the string will be contructed. Default is Hours:Minutes:Seconds.MS\n#' @param msSep How the separator between seconds and ms will look like\n#' @examples\n#' # 18 minutes and 22 seconds and 13 milliseconds\n#' ms2time(1102013)\n#' @export\nms2time <- function(timestamp, unit=\"%H:%M:%S\", msSep=\":\") {\n  if (any(timestamp >= 60*60*24*1000)) stop(simpleError(\"More than 24 hours. Can't do days\"))\n  sec <- timestamp/1000\n  ms <- formatC(x=round((sec-trunc(sec))*1000, digits=3), \n                digits=3, width=3, format=\"d\", flag=\"0\")\n  sec <- trunc(sec)\n  start <- as.POSIXct(Sys.time())\n  dt <- difftime(start+sec, start, units=\"secs\")\n  time_char <- paste0(format(.POSIXct(dt, tz=\"GMT\"), unit), msSep, ms)\n  return(time_char)\n}\n\n# function to write r list object to a .csv file which datavyu understands\n# must provide a file name \n\n\n#' R data to Datavyu .csv file\n#' \n#' Exports R data as a list or dataframe to a .csv file used by Datavyu for importing.\n#' Each list item is a different column in the final datavyu file.\n#' To import go to Datavyu and go to File > Import > import .csv\n#' \n#' @param rlist List of columns to be used in the final Datavyu file.\n#' @param filename Filename of the .csv file to be used\n#' @examples\n#' # First get example data to use\n#' example_data <- datavyu_dat()\n#' \n#' # See how the example data is structured\n#' str(example_data)\n#' \n#' # Export R list to a .csv file for importing into Datavyu\n#' r2datavyu(example_data, \"example_file\")\n#' @export\nr2datavyu <- function(rlist, filename=\"datavyur_export\") {\n  \n  na2val <- function(x, v=\"\") ifelse(is.na(x), v, x)\n  \n  top_digit <- \"#4\"\n  \n  n_col <- length(rlist)\n  col_names <- names(rlist)\n  \n  if (n_col < 1) stop(simpleError(\"no columns found in r list object\"))\n  if (any(col_names == \"\")) stop(simpleError(\"not all list items have column names\"))\n  \n  # go through each column structured as an r list\n  each_col <- lapply(1:n_col, function(col) {\n    \n    # get names of codes\n    codes <- rlist[[col]]\n    col_name <- col_names[col]\n    code_names <- names(codes)\n    \n    common_codes_l <- code_names %in% c(\"ordinal\", \"onset\", \"offset\")\n    \n    if (sum(common_codes_l) != 3) stop(simpleError(\"ordinal, onset, offset not found\"))\n    if (length(codes) < 4) stop(simpleError(\"no custom arguments found\"))\n    \n    \n    custom_code_names <- code_names[!common_codes_l]\n    code_str <- paste0(custom_code_names, \"|NOMINAL\", collapse=\",\")\n    col_str <- paste0(col_name, \" (MATRIX,true,)-\", code_str)\n    \n    ts_ord <- codes$ordinal\n    ts_on <- ms2time(codes$onset)[ts_ord]\n    ts_off <- ms2time(codes$offset)[ts_ord]\n    \n    code_mat <- lapply(custom_code_names, function(cn) {\n      na2val(as.character(codes[[cn]])[ts_ord])\n    })\n    \n    code_mat <- cbind(ts_on, ts_off, do.call(cbind, code_mat))\n    \n    col_dat <- apply(code_mat, 1, function(s) {\n      code_text <- paste0(\"(\", paste0(s[-c(1,2)], collapse=\",\"), \")\", collapse=\"\")\n      paste0(s[1], \",\", s[2], \",\", code_text)\n    })\n    \n    return(c(col_str, col_dat))\n  })\n  \n  text_lines <- c(top_digit, c(each_col, recursive=TRUE))\n  out_file <- file(paste0(filename, \".csv\"), \"w\")\n  writeLines(text_lines, out_file)\n  close(out_file)\n}\n\n#' Import .csv to R\n#' \n#' Import Datavyu column to R when using the datavyu2csv.rb script\n#' \n#' If the same column name was used but has different number of arguments then you will get an error unless asList=FALSE.\n#' This function assumes that the .csv is structured in a way based on how the datavyu2csv.rb script exports data.\n#' \n#' @param folder Character string of the name of the folder to be scanned.\n#' @param column The name of the column to import as used in the Datavyu file.\n#' @param ... Additional options passed to the read.csv function\n#' @examples\n#' scan_colnames(\"myfolder\")\n#' @export\ncompile_dvcolumn <- function(folder, column, ..., asList=FALSE) {\n  require(mejr)\n  filepaths <- list.files(folder, full.names=TRUE, pattern=\"\\\\.csv$\")\n  cols <- lapply(filepaths, function(x) {\n    d <- read.csv(x, stringsAsFactors=FALSE)\n    if (!any(names(d) == \"column\")) return(FALSE)\n    return(all(d$column == column))\n  })\n  cols <- unlist(cols)\n  #cols <- grepl(paste0(column, \"__\"), basename(filepaths))\n  sublist <- filepaths[cols]\n  \n  dat <- lapply(sublist, function(x) read.csv(x, ...))\n\n  if (!asList) dat <- do.call(rbind, dat)\n  \n  return(dat)\n}\n\n\n#' Scan .csv files for data\n#' \n#' Scans data exported as .csv from Datavyu and returns a list of file paths\n#' \n#' @param folder Character string of the name of the folder to be scanned.\n#' @param unq Return only unique column names found.\n#' @examples\n#' scan_colnames(\"myfolder\")\n#' @export\nscan_colnames <- function(folder, unq=FALSE) {\n  filepaths <- list.files(folder, full.names=TRUE, pattern=\"\\\\.csv$\")\n  cols <- lapply(filepaths, function(x) {\n    d <- read.csv(x, stringsAsFactors=FALSE)\n    if (!any(names(d) == \"column\")) return(NA)\n    return(unique(d$column))\n  })\n  cols <- unlist(cols)\n  if (unq) cols <- unique(cols)\n  return(cols)\n}\n",
    "created" : 1421421820837.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "157385871",
    "id" : "D933681A",
    "lastKnownWriteTime" : 1421426204,
    "path" : "~/datavyur/R/csv2datavyu.R",
    "project_path" : "R/csv2datavyu.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}